1. 인라인 스타일
- 태그 안에 속성값으로 작성 / 06-inline.html
2. 내부스타일 작성법
-<style>태그 안에 작성 / 06-stylesheet.html-1
3. 외부스타일 작성법
- 새로운 css파일을 만들고 복사하고 붙여넣기 후 <link>태그로 작성
/ 06-stylesheet.html-2


1. 전체 선택자 / *{___} /  전체태그, body, head, html까지도 적용된다.

2. 태그(타입) 선택자 / 태그{___}

3. 클래스 선택자
공통적으로 속성을 적용하고 싶을 때.
class="___" - 의미가 있는 이름으로 같게 해줘야한다, 여러개를 만들 수 있음
style 안에 .___(클래스이름) 넣고 작성
-> (클래스 이름) _ (공통언어) 작성 후 스타일 안에 .on{ } 으로 작성하면 공통언어로 들어간 부분을 같이 적용 할 수 있다.
4. id 선택자
각각 스타일을 적용할 때.
id="____" - 의미가 있는 이름으로 각각 다르게 해줘야 한다. (중복 안됨)
style 안에 #___(아이디이름) 넣고 작성

4. 그룹 선택자


자손 선택자
section(한 칸 띄고)p {}

자식 선택자
section>p {}

인접 형제 선택자 (바로 뒤에 오는 하나만 선택)
h1+p {}

형제 선택자 (뒤에 오는 모든 형제들 선택)
h1~p {}

<a> 메뉴만들때 많이 사용
:link (방문하지 않은 링크)
:visited (방문했던 링크)
:hover (마우스 올렸을때)
:focus (tab키를 누를 때)
:active (클릭했을때)
:after (콘텐츠 뒤에)
:before (콘텐츠 앞에)
:first-letter (첫번째 글자)
:first-line (첫번째 라인)

li.new {}
띄지않고 붙여쓰면 li 태그면서 new라는 태그..
li .new {}
li 태그와 new라는 태그

css 작성시 웹페이지 틈 없이 만들기
*{
    margin: 0;
    padding: 0;
}


lorem -> 테스트할때 텍스트가 길게 쓰여짐


크기단위
% -> 글자 크기보단 레이아웃시 사용
rem
>>>>> 이 둘은 배수가 된다.

font-family 입력시 마지막에 serif 또는 sans-sefit
꼭꼭 입력해주기! 다국어 지정, 번역이 때문

text-align: 텍스트 정렬


margin: 0 auto; -> 가운데 정렬, 많이 쓰임.


border-radius: 50px;  /* 모든 테두리를 원으로 */

     /*  
block: margin과 padding을 자유롭게 지정, width-height 자유롭게 변경
(div, 시멘틱 태그(레이아웃), p, h1~h6, table, ul,ol...)

inline: marginrhk padding을 좌우만 지정, width-height 변경 불가
(a, img, span, button, textarea, select, input, label...) )

inline-block: inline태그 처럼 한 줄로 정렬이 되지만
block 태그의 특징을 사용할 수 있다.
        */


뷰포트 - 사용자가 보는 영역

z-index: 수치가 클수록 앞으로 나옴

float 사용시 넘치는 부분을 숨겨줌
-> overflow: hidden;

<style>안에
background 사용 예시
배경 위에 이미지를 올려야 할 때
이미지에 글자나 애니메이션 효과를 주어야 할 때 <div>사용
-background-repeat:no-repeat;  /* 배경 이미지 반복 안함 */
-background-image:url('images/book-icon.png');  /* 배경 이미지 파일 */
-background-position:left center;  /* 배경 이미지 위치 */
-background-attachment:fixed;  /* 배경 이미지 고정 */

flex : 너비
flex-basis : 기본 크기 
flex-grow : 컨테이너에 남는 공간이 있으면
 아이템의 flex-basis 크기가 얼마나 더 
할당 가능한지 나타내는 속성 (얼마나 더 늘려줄 수 있는지)
flex-shrink : 컨테이너에 공간이 부족해지면
아이템의 크기가 얼마나 더 줄어들 수 잇는지 (얼마나 줄일 수 있는지)
flex-direction: 방향
flex-wrap : 아이템들이 넘칠때 감싸는 기능
flex-flow : direction, wrap 한번에 사용해줌


grid-template-columns: 1fr 1fr 1fr ;-> 비율로 채워짐
grid-template-columns: 200px 200px 200px ;-> 200px 크기로 정렬

속성값
grid-template-columns: repeat(3, 1fr) ; -> 1fr을 3번 반복함
grid-template-rows: minmax(100px, auto) -> (최솟값, 최댓값) -> 100px 이하로는 길이가 짧아질 수 없음.


















